<link rel="stylesheet" href="/css/devtube/pages/messages.css">

<div class="messages-main">
  <div class="sidebar">
    <div class="header">
      <h2>Messages</h2>
    </div>
    <div class="conversations-list sidebar-conversations">
      <!-- Conversations will be loaded here -->
    </div>
  </div>
  
  <div class="message-content">
    <% if (subPage === 'inbox') { %>
      <div class="main-content-wrapper">
        
        <!-- Add empty state placeholder -->
        <div class="no-conversation-selected">
          <div class="placeholder-content">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="64" height="64" fill="currentColor">
              <path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0 14H6l-2 2V4h16v12z"/>
            </svg>
            <h3>Your Messages</h3>
            <p>Select a conversation to view messages</p>
          </div>
        </div>
      </div>
    <% } else if (subPage === 'conversation') { %>
      <div class="conversation">
        <div class="conversation-header" id="conversation-header">
          <!-- Channel info will be loaded here -->
        </div>
        <div class="messages-container" id="messages-container">
          <!-- Messages will be loaded here -->
        </div>
        <div class="message-input">
          <textarea 
            id="message-input" 
            placeholder="Type a message..." 
            class="scrollable"
            onInput="this.style.height='1px'; this.style.height = (this.scrollHeight)+'px';"
          ></textarea>
          <button id="send-button">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
              <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/>
            </svg>
          </button>
        </div>
      </div>
    <% } %>
  </div>
</div>

<template id="conversation-item-template">
  <div class="conversation-item">
    <div class="avatar">
      <img src="" alt="Channel avatar">
    </div>
    <div class="info">
      <div class="name"></div>
      <div class="last-message"></div>
    </div>
    <div class="time"></div>
    <div class="unread-badge">0</div>
  </div>
</template>

<template id="message-template">
  <div class="message">
    <div class="avatar">
      <img src="" alt="Channel avatar">
    </div>
    <div class="content">
      <div class="sender"></div>
      <div class="text"></div>
      <div class="time"></div>
    </div>
  </div>
</template>

<style>
  /* Error message styling */
  .error-message {
    background-color: #ffdddd;
    color: #d32f2f;
    padding: 15px;
    border-radius: 4px;
    margin: 10px;
    text-align: center;
  }
  
  .retry-button {
    background-color: #2196f3;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 10px;
  }
  
  .retry-button:hover {
    background-color: #0b7dda;
  }
</style>

<script>
  // Variables
  const sidebarConversationsList = document.querySelector('.sidebar-conversations');
  const mainConversationsList = document.querySelector('.main-conversations');
  const messagesContainer = document.getElementById('messages-container');
  const messageInput = document.getElementById('message-input');
  const sendButton = document.getElementById('send-button');
  const conversationHeader = document.getElementById('conversation-header');
  let currentRecipientId = '<%= typeof recipientId !== "undefined" ? recipientId : "" %>';
  const subPage = '<%= subPage %>';
  
  // Display error message with retry button
  function displayErrorMessage(container, message) {
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-message';
    
    const messageP = document.createElement('p');
    messageP.textContent = message;
    errorDiv.appendChild(messageP);
    
    const retryButton = document.createElement('button');
    retryButton.className = 'retry-button';
    retryButton.textContent = 'Retry';
    retryButton.addEventListener('click', loadConversations);
    errorDiv.appendChild(retryButton);
    
    container.innerHTML = '';
    container.appendChild(errorDiv);
  }
  
  // Format time
  function formatMessageTime(date) {
    const messageDate = new Date(date);
    const now = new Date();
    const diff = now - messageDate;
    
    // If less than 24 hours, show time
    if (diff < 24 * 60 * 60 * 1000) {
      return messageDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }
    
    // If less than 7 days, show day of week
    if (diff < 7 * 24 * 60 * 60 * 1000) {
      return messageDate.toLocaleDateString([], { weekday: 'short' });
    }
    
    // Otherwise show date
    return messageDate.toLocaleDateString();
  }
  
  // Check authentication status
  async function checkAuthStatus() {
    try {
      const response = await fetch('/messages/auth-status');
      if (response.ok) {
        const data = await response.json();
        return data.authenticated && data.hasChannel;
      }
      return false;
    } catch (error) {
      console.error('Error checking auth status:', error);
      return false;
    }
  }
  
  // Load conversations with authentication check
  async function loadConversations() {
    try {
      console.log('Checking authentication before fetching conversations...');
      
      // First check authentication status
      const isAuthenticated = await checkAuthStatus();
      if (!isAuthenticated) {
        console.error('Not authenticated or no channel');
        displayErrorMessage(sidebarConversationsList, 'Please log in and create a channel to view messages.');
        
        if (mainConversationsList) {
          displayErrorMessage(mainConversationsList, 'Please log in and create a channel to view messages.');
        }
        return;
      }
      
      console.log('Fetching conversations...');
      const response = await fetch('/messages/conversations');
      
      if (!response.ok) {
        const contentType = response.headers.get('content-type');
        let errorMessage = `Error ${response.status}: `;
        
        try {
          // Only try to parse as JSON if the content type is JSON
          if (contentType && contentType.includes('application/json')) {
            const errorData = await response.json();
            errorMessage += errorData.error || errorData.message || 'Unknown error';
          } else {
            // Otherwise just get the text
            errorMessage += await response.text();
          }
        } catch (parseError) {
          errorMessage += 'Could not parse error response';
          console.error('Error parsing response:', parseError);
        }
        
        console.error('Error fetching conversations:', errorMessage);
        
        // Display error message with retry button
        displayErrorMessage(sidebarConversationsList, `Error loading conversations. Please try again.`);
        
        if (mainConversationsList) {
          displayErrorMessage(mainConversationsList, `Error loading conversations. Please try again.`);
        }
        return;
      }

      let conversations;
      try {
        conversations = await response.json();
        console.log('Loaded conversations:', conversations);
      } catch (jsonError) {
        console.error('Error parsing conversations JSON:', jsonError);
        displayErrorMessage(sidebarConversationsList, 'Error parsing server response. Please try again.');
        
        if (mainConversationsList) {
          displayErrorMessage(mainConversationsList, 'Error parsing server response. Please try again.');
        }
        return;
      }
      
      // Additional debug info for empty arrays
      if (!conversations || conversations.length === 0) {
        console.log('No conversations returned from API');
      }
      
      // Clear existing lists
      sidebarConversationsList.innerHTML = '';
      if (mainConversationsList) {
        mainConversationsList.innerHTML = '';
      }
      
      if (!conversations || conversations.length === 0) {
        const noMessages = document.createElement('div');
        noMessages.className = 'no-messages';
        noMessages.textContent = 'No conversations yet';
        sidebarConversationsList.appendChild(noMessages.cloneNode(true));
        if (mainConversationsList) {
           mainConversationsList.appendChild(noMessages);
        }
        return;
      }
      
      // Debug each conversation object
      conversations.forEach((conversation, index) => {
        console.log(`Conversation ${index}:`, JSON.stringify(conversation));
      });
      
      conversations.forEach(conversation => {
        // Skip invalid conversations
        if (!conversation._id || !conversation.lastMessage) {
          console.warn('Skipping invalid conversation:', conversation);
          return;
        }
        
        const template = document.getElementById('conversation-item-template');
        const clone = document.importNode(template.content, true);
        const item = clone.querySelector('.conversation-item');
        
        // Make sure we have the proper ID
        const channelId = conversation._id._id || conversation._id;
        item.setAttribute('data-id', channelId);
        
        // Set avatar if available
        if (conversation._id.logoURL) {
          item.querySelector('.avatar img').src = conversation._id.logoURL;
        }
        
        // Set channel name
        item.querySelector('.name').textContent = conversation._id.name || 'Unknown Channel';
        
        // Set last message with proper truncation
        if (conversation.lastMessage.content) {
          item.querySelector('.last-message').textContent = 
            conversation.lastMessage.content.length > 30
              ? conversation.lastMessage.content.substring(0, 30) + '...'
              : conversation.lastMessage.content;
        } else {
          item.querySelector('.last-message').textContent = 'No message content';
        }
        
        // Set time
        if (conversation.lastMessage.sentAt) {
          item.querySelector('.time').textContent = formatMessageTime(conversation.lastMessage.sentAt);
        }
        
        // Handle unread badge
        const unreadBadge = item.querySelector('.unread-badge');
        if (conversation.unreadCount > 0) {
          unreadBadge.textContent = conversation.unreadCount;
          unreadBadge.style.display = 'flex';
        } else {
          unreadBadge.style.display = 'none';
        }
        
        // Add click event
        item.addEventListener('click', () => {
          window.location.href = `/messages/${channelId}`;
        });
        
        // Append to both lists - first the sidebar
        sidebarConversationsList.appendChild(clone);
        
        // Then to the main list if it exists
        if (mainConversationsList) {
          const mainClone = document.importNode(template.content, true);
          const mainItem = mainClone.querySelector('.conversation-item');
          
          // Copy all the attributes and content
          mainItem.setAttribute('data-id', channelId);
          
          if (conversation._id.logoURL) {
            mainItem.querySelector('.avatar img').src = conversation._id.logoURL;
          }
          
          mainItem.querySelector('.name').textContent = conversation._id.name || 'Unknown Channel';
          
          if (conversation.lastMessage.content) {
            mainItem.querySelector('.last-message').textContent = 
              conversation.lastMessage.content.length > 30
                ? conversation.lastMessage.content.substring(0, 30) + '...'
                : conversation.lastMessage.content;
          } else {
            mainItem.querySelector('.last-message').textContent = 'No message content';
          }
          
          if (conversation.lastMessage.sentAt) {
            mainItem.querySelector('.time').textContent = formatMessageTime(conversation.lastMessage.sentAt);
          }
          
          const mainUnreadBadge = mainItem.querySelector('.unread-badge');
          if (conversation.unreadCount > 0) {
            mainUnreadBadge.textContent = conversation.unreadCount;
            mainUnreadBadge.style.display = 'flex';
          } else {
            mainUnreadBadge.style.display = 'none';
          }
          
          mainItem.addEventListener('click', () => {
            window.location.href = `/messages/${channelId}`;
          });
          
          mainConversationsList.appendChild(mainClone);
        }
      });
      
      // Highlight current conversation if on conversation page
      if (subPage === 'conversation' && currentRecipientId) {
        const currentItem = sidebarConversationsList.querySelector(`[data-id="${currentRecipientId}"]`);
        if (currentItem) {
          currentItem.classList.add('active');
        }
        if (mainConversationsList) {
          const currentItemMain = mainConversationsList.querySelector(`[data-id="${currentRecipientId}"]`);
          if (currentItemMain) {
            currentItemMain.classList.add('active');
          }
        }
      }
    } catch (error) {
      console.error('Error loading conversations:', error);
      
      // Use the displayErrorMessage function for consistent error display
      displayErrorMessage(
        sidebarConversationsList, 
        'Could not load conversations. Please check your connection and try again.'
      );
      
      if (mainConversationsList) {
        displayErrorMessage(
          mainConversationsList, 
          'Could not load conversations. Please check your connection and try again.'
        );
      }
    }
  }
  
  // Load conversation with a specific channel
  async function loadConversation(channelId) {
    try {
      // Validate channel ID format
      if (!channelId || !/^[0-9a-fA-F]{24}$/.test(channelId)) {
        console.error('Invalid channel ID format:', channelId);
        messagesContainer.innerHTML = '<div class="error-message">Invalid channel ID</div>';
        return;
      }
      
      // Load channel info
      const channelResponse = await fetch(`/api/channel/${channelId}`);
      
      if (!channelResponse.ok) {
        console.error('Error fetching channel info:', channelResponse.status);
        messagesContainer.innerHTML = '<div class="error-message">Could not load channel information</div>';
        return;
      }
      
      let channel;
      try {
        channel = await channelResponse.json();
      } catch (error) {
        console.error('Error parsing channel JSON:', error);
        messagesContainer.innerHTML = '<div class="error-message">Error parsing channel data</div>';
        return;
      }
      
      // Update header
      conversationHeader.innerHTML = `
        <div class="avatar">
          <img src="${channel.logoURL}" alt="${channel.name}">
        </div>
        <div class="info">
          <div class="name">${channel.name}</div>
          <div class="handle">@${channel.handle}</div>
        </div>
      `;
      
      // Load messages
      const messagesResponse = await fetch(`/messages/conversation/${channelId}`);
      
      if (!messagesResponse.ok) {
        console.error('Error fetching messages:', messagesResponse.status);
        messagesContainer.innerHTML = '<div class="error-message">Could not load messages</div>';
        return;
      }
      
      let messages;
      try {
        messages = await messagesResponse.json();
      } catch (error) {
        console.error('Error parsing messages JSON:', error);
        messagesContainer.innerHTML = '<div class="error-message">Error parsing message data</div>';
        return;
      }
      
      messagesContainer.innerHTML = '';
      
      if (messages.length === 0) {
        const noMessages = document.createElement('div');
        noMessages.className = 'no-messages';
        noMessages.textContent = 'No messages yet. Start a conversation!';
        messagesContainer.appendChild(noMessages);
        return;
      }
      
      messages.forEach(message => {
        const template = document.getElementById('message-template');
        const clone = document.importNode(template.content, true);
        const messageEl = clone.querySelector('.message');
        
        const isSent = message.sender._id === '<%= channel?.id %>';
        messageEl.classList.add(isSent ? 'sent' : 'received');
        
        messageEl.querySelector('.avatar img').src = message.sender.logoURL || '/img/default-channel-logo.png';
        messageEl.querySelector('.sender').textContent = message.sender.name;
        messageEl.querySelector('.text').textContent = message.content;
        messageEl.querySelector('.time').textContent = formatMessageTime(message.sentAt);
        
        messagesContainer.appendChild(clone);
      });
      
      // Scroll to bottom
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    } catch (error) {
      console.error('Error loading conversation:', error);
      messagesContainer.innerHTML = '<div class="error-message">An error occurred while loading the conversation</div>';
    }
  }
  
  // Send message
  async function sendMessage() {
    const content = messageInput.value.trim();
    if (!content) return;
    
    try {
      // Validate recipient ID
      if (!currentRecipientId || !/^[0-9a-fA-F]{24}$/.test(currentRecipientId)) {
        console.error('Invalid recipient ID:', currentRecipientId);
        alert('Cannot send message: Invalid recipient');
        return;
      }
      
      // Show sending indicator
      const sendingIndicator = document.createElement('div');
      sendingIndicator.className = 'sending-indicator';
      sendingIndicator.textContent = 'Sending...';
      messagesContainer.appendChild(sendingIndicator);
      
      const response = await fetch('/messages/send', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          recipientId: currentRecipientId,
          content
        })
      });
      
      // Remove sending indicator
      sendingIndicator.remove();
      
      if (response.ok) {
        messageInput.value = '';
        messageInput.style.height = 'auto';
        
        // Reload conversation to show new message
        await loadConversation(currentRecipientId);
      } else {
        let errorData;
        try {
          errorData = await response.json();
          console.error('Error sending message:', errorData);
          alert(`Failed to send message: ${errorData.error || 'Unknown error'}`);
        } catch (parseError) {
          console.error('Error parsing error response:', parseError);
          alert('Failed to send message. Please try again.');
        }
      }
    } catch (error) {
      console.error('Error sending message:', error);
      alert('Failed to send message. Please check your connection and try again.');
    }
  }
  
  // Initialize
  document.addEventListener('DOMContentLoaded', async () => {
    // Load conversations immediately
    await loadConversations();
    
    // If on conversation page, load conversation
    if (subPage === 'conversation' && currentRecipientId) {
      await loadConversation(currentRecipientId);
      
      // Set up message sending
      sendButton.addEventListener('click', sendMessage);
      messageInput.addEventListener('keypress', e => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          sendMessage();
        }
      });
    }
    
    // Set up refresh interval for conversations - shorter interval to ensure inbox is updated
    setInterval(loadConversations, 15000); // Refresh every 15 seconds
    
    // If on conversation page, set up refresh interval for messages
    if (subPage === 'conversation' && currentRecipientId) {
      setInterval(() => loadConversation(currentRecipientId), 10000); // Refresh every 10 seconds
    }
  });
</script> 